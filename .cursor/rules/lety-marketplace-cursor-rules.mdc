---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
# Project Overview

This web platform (called Lety Marketplace) is being developed to address the difficulties pet owners encounter when seeking trustworthy veterinary services within BogotÃ¡. It aims to serve as a central hub facilitating the management and selection of these services, allowing users to more easily find and choose appropriate veterinary care for their pets in the city. The application focuses on enhancing the connection between veterinary clinics and potential clients, improving the decision-making process for pet owners by providing relevant information, and fostering trust within the BogotÃ¡ veterinary market through a dedicated digital solution.

# Personality

The model is configured to be direct and explanatory. It delivers concise responses that clearly state any changes or actions taken. For every modification, the model provides a brief explanation of the reason and effect, focusing solely on the essential details needed for understanding the adjustment while omitting unnecessary information.

Additionally, every response will begin with the ðŸ¤– emoji.

# Tech Stack

## Frontend

In the frontend the technologies used are:

- Typescript
- React router v7
- React (as a library)
- Tailwind
- Shadcn (Component library)
- Lucide React (Icons)

## Backend

In the backend the technologies used are:

- Node.js
- Express.js
- Playwright (testing library)

# Database

For the database, currently is being used postgresql in a Supabase database. The SQL code for the structure of the database is:

```sql
CREATE TABLE "usuarios" (
  "id_usuario" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "nombre" varchar(100),
  "correo" varchar(100) UNIQUE,
  "contrasena" varchar(200),
  "telefono" varchar(15),
  "fecha_registro" timestamp DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE public.citas (
  id_cita integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  id_usuario integer NOT NULL,
  id_mascota integer NOT NULL,
  id_clinica integer NOT NULL,
  id_servicio integer NOT NULL,
  fecha_inicio timestamp without time zone NULL,
  fecha_fin timestamp without time zone NULL,
  estado character varying(50) NULL,
  acepto_terminos boolean NULL DEFAULT true,
  created_at timestamp with time zone NULL DEFAULT timezone('utc'::text, now()),
  horario character varying(20) NULL,
  motivo text NULL,
  notas_adicionales text NULL,
  preferencia_recordatorio character varying(10) NULL,
  CONSTRAINT citas_pkey PRIMARY KEY (id_cita),
  CONSTRAINT citas_id_clinica_fkey FOREIGN KEY (id_clinica) REFERENCES clinicas(id_clinica),
  CONSTRAINT citas_id_mascota_fkey FOREIGN KEY (id_mascota) REFERENCES mascotas(id_mascota),
  CONSTRAINT citas_id_servicio_fkey FOREIGN KEY (id_servicio) REFERENCES servicios(id_servicio),
  CONSTRAINT citas_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario)
) TABLESPACE pg_default;

CREATE TABLE public.clinica_especialidades (
  id_clinica integer NOT NULL,
  id_especialidad integer NOT NULL,
  CONSTRAINT clinica_especialidades_pkey PRIMARY KEY (id_clinica, id_especialidad),
  CONSTRAINT clinica_especialidades_id_clinica_fkey FOREIGN KEY (id_clinica) REFERENCES clinicas(id_clinica),
  CONSTRAINT clinica_especialidades_id_especialidad_fkey FOREIGN KEY (id_especialidad) REFERENCES especialidades(id_especialidad)
) TABLESPACE pg_default;

CREATE TABLE public.clinicas (
  id_clinica integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  nombre character varying(100) NULL,
  direccion character varying(150) NULL,
  telefono character varying(15) NULL,
  correo character varying(100) NULL,
  contrasena character varying(200) NULL,
  descripcion text NULL,
  "NIT" text NULL,
  estado character varying(50) NULL DEFAULT 'pendiente'::character varying,
  fecha_registro timestamp without time zone NULL DEFAULT CURRENT_TIMESTAMP,
  certificado_url text NULL,
  sitio_web text NULL,
  codigo_postal text NULL,
  ciudad text NULL,
  detalles jsonb NULL,
  latitud numeric(9,6) NULL,
  longitud numeric(9,6) NULL,
  CONSTRAINT clinicas_pkey PRIMARY KEY (id_clinica),
  CONSTRAINT clinicas_NIT_key UNIQUE ("NIT"),
  CONSTRAINT clinicas_correo_key UNIQUE (correo)
) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_clinicas_latitud ON public.clinicas USING btree (latitud) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_clinicas_longitud ON public.clinicas USING btree (longitud) TABLESPACE pg_default;

CREATE TABLE public.especialidades (
  id_especialidad integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  nombre character varying(100) NULL,
  CONSTRAINT especialidades_pkey PRIMARY KEY (id_especialidad)
) TABLESPACE pg_default;

CREATE TABLE public.favoritos (
  id_usuario integer NOT NULL,
  id_clinica integer NOT NULL,
  fecha_agregado timestamp without time zone NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT favoritos_pkey PRIMARY KEY (id_usuario, id_clinica),
  CONSTRAINT favoritos_id_clinica_fkey FOREIGN KEY (id_clinica) REFERENCES clinicas(id_clinica),
  CONSTRAINT favoritos_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario)
) TABLESPACE pg_default;

CREATE TABLE public.fotos_clinicas (
  id_foto integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  id_clinica integer NOT NULL,
  titulo character varying(100) NOT NULL,
  url character varying(500) NOT NULL,
  tipo character varying(50) NOT NULL,
  es_principal boolean NULL DEFAULT false,
  created_at timestamp without time zone NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fotos_clinicas_pkey PRIMARY KEY (id_foto),
  CONSTRAINT fotos_clinicas_id_clinica_fkey FOREIGN KEY (id_clinica) REFERENCES clinicas(id_clinica) ON DELETE CASCADE
) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_fotos_clinicas_id_clinica ON public.fotos_clinicas USING btree (id_clinica) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_fotos_clinicas_tipo ON public.fotos_clinicas USING btree (tipo) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_fotos_clinicas_es_principal ON public.fotos_clinicas USING btree (es_principal) TABLESPACE pg_default;

CREATE TABLE public.horarios_atencion (
  id_horario integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  id_clinica integer NOT NULL,
  dia_semana character varying(20) NULL,
  hora_apertura time without time zone NULL,
  hora_cierre time without time zone NULL,
  es_24h boolean NULL DEFAULT false,
  esta_cerrado boolean NULL DEFAULT false,
  CONSTRAINT horarios_atencion_pkey PRIMARY KEY (id_horario),
  CONSTRAINT horarios_atencion_id_clinica_fkey FOREIGN KEY (id_clinica) REFERENCES clinicas(id_clinica)
) TABLESPACE pg_default;

CREATE TABLE public.mascotas (
  id_mascota integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  id_usuario integer NOT NULL,
  nombre character varying(100) NULL,
  edad integer NULL,
  raza character varying(100) NULL,
  historial_medico text NULL,
  foto_url character varying(200) NULL,
  especie character varying NULL,
  genero text NULL,
  peso numeric NULL,
  CONSTRAINT mascotas_pkey PRIMARY KEY (id_mascota),
  CONSTRAINT mascotas_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario),
  CONSTRAINT mascotas_genero_check CHECK ((genero = ANY (ARRAY['Macho'::text, 'Hembra'::text]))),
  CONSTRAINT mascotas_peso_check CHECK ((peso > (0)::numeric))
) TABLESPACE pg_default;

CREATE TABLE public.notificaciones (
  id_notificacion integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  id_usuario integer NOT NULL,
  id_clinica integer NOT NULL,
  mensaje text NULL,
  fecha timestamp without time zone NULL DEFAULT CURRENT_TIMESTAMP,
  leido boolean NULL DEFAULT false,
  CONSTRAINT notificaciones_pkey PRIMARY KEY (id_notificacion),
  CONSTRAINT notificaciones_id_clinica_fkey FOREIGN KEY (id_clinica) REFERENCES clinicas(id_clinica),
  CONSTRAINT notificaciones_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario)
) TABLESPACE pg_default;

CREATE TABLE public.reseÃ±as (
  id_resena integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  id_usuario integer NOT NULL,
  id_clinica integer NOT NULL,
  calificacion integer NULL,
  comentario text NULL,
  fecha timestamp without time zone NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT reseÃ±as_pkey PRIMARY KEY (id_resena),
  CONSTRAINT reseÃ±as_id_clinica_fkey FOREIGN KEY (id_clinica) REFERENCES clinicas(id_clinica),
  CONSTRAINT reseÃ±as_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario)
) TABLESPACE pg_default;

CREATE TABLE public.servicios (
  id_servicio integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  id_clinica integer NOT NULL,
  nombre character varying(100) NULL,
  descripcion text NULL,
  precio numeric(10,2) NULL,
  categoria character varying(100) NULL,
  disponible boolean NULL DEFAULT true,
  CONSTRAINT servicios_pkey PRIMARY KEY (id_servicio),
  CONSTRAINT servicios_id_clinica
```

# Current File structure
â”œâ”€â”€â”€.cursor
â”‚   â””â”€â”€â”€rules
â”œâ”€â”€â”€.github
â”œâ”€â”€â”€backend
â”‚   â”œâ”€â”€â”€playwright-report
â”‚   â”œâ”€â”€â”€src
â”‚   â”‚   â”œâ”€â”€â”€middleware
â”‚   â”‚   â””â”€â”€â”€routes
â”‚   â”œâ”€â”€â”€test-results
â”‚   â”œâ”€â”€â”€tests
â”‚   â”œâ”€â”€â”€tests-examples
â”‚   â””â”€â”€â”€uploads
â””â”€â”€â”€frontend
    â”œâ”€â”€â”€.react-router
    â”‚   â””â”€â”€â”€types
    â”‚       â””â”€â”€â”€app
    â”‚           â”œâ”€â”€â”€+types
    â”‚           â”œâ”€â”€â”€layouts
    â”‚           â”‚   â”œâ”€â”€â”€DashboardLayoutClient
    â”‚           â”‚   â”‚   â””â”€â”€â”€+types
    â”‚           â”‚   â””â”€â”€â”€DashboardLayoutVet
    â”‚           â”‚       â””â”€â”€â”€+types
    â”‚           â””â”€â”€â”€routes
    â”‚               â”œâ”€â”€â”€+types
    â”‚               â”œâ”€â”€â”€DashboardClient
    â”‚               â”‚   â””â”€â”€â”€+types
    â”‚               â”œâ”€â”€â”€DashboardVet
    â”‚               â”‚   â”œâ”€â”€â”€+types
    â”‚               â”‚   â”œâ”€â”€â”€GeneralInformation
    â”‚               â”‚   â”‚   â””â”€â”€â”€+types
    â”‚               â”‚   â”œâ”€â”€â”€PhotosVet
    â”‚               â”‚   â”‚   â””â”€â”€â”€+types
    â”‚               â”‚   â””â”€â”€â”€VetAnalytics
    â”‚               â”‚       â””â”€â”€â”€+types
    â”‚               â”œâ”€â”€â”€LoginPage
    â”‚               â”‚   â””â”€â”€â”€+types
    â”‚               â””â”€â”€â”€Unauthorized
    â”‚                   â””â”€â”€â”€+types
    â”œâ”€â”€â”€app
    â”‚   â”œâ”€â”€â”€components
    â”‚   â”‚   â””â”€â”€â”€ui
    â”‚   â”œâ”€â”€â”€layouts
    â”‚   â”‚   â”œâ”€â”€â”€DashboardLayoutClient
    â”‚   â”‚   â””â”€â”€â”€DashboardLayoutVet
    â”‚   â”œâ”€â”€â”€lib
    â”‚   â”œâ”€â”€â”€resources
    â”‚   â”‚   â””â”€â”€â”€images
    â”‚   â”œâ”€â”€â”€routes
    â”‚   â”‚   â”œâ”€â”€â”€DashboardClient
    â”‚   â”‚   â”œâ”€â”€â”€DashboardVet
    â”‚   â”‚   â”‚   â”œâ”€â”€â”€GeneralInformation
    â”‚   â”‚   â”‚   â”œâ”€â”€â”€PhotosVet
    â”‚   â”‚   â”‚   â””â”€â”€â”€VetAnalytics
    â”‚   â”‚   â”œâ”€â”€â”€HomePage
    â”‚   â”‚   â”œâ”€â”€â”€LoginPage
    â”‚   â”‚   â””â”€â”€â”€Unauthorized
    â”‚   â”œâ”€â”€â”€stores
    â”‚   â”œâ”€â”€â”€types
    â”‚   â”œâ”€â”€â”€utils
    â”‚   â””â”€â”€â”€zodSchemas
    â””â”€â”€â”€public

# Comments

- Be brief and precise â†’ Explain what the code does, not how it works.
- Avoid the obvious â†’ Donâ€™t comment self-explanatory code (i++ // Increments i).
- Use JSDoc for functions and methods â†’ Describe parameters and return values.
- Keep comments updated â†’ If the code changes, update the comments.
- Mark TODOs and FIXMEs â†’ Use // TODO: and // FIXME: for pending tasks.
- Comment complex logic â†’ Explain algorithms or key decisions.
- Stick to one language â†’ If the code is in English, keep comments in English too.
- Donâ€™t overuse comments â†’ Clean code should need minimal commenting.

âœ¨ Extra: Use block comments (/\*_ ... _/) for documentation and inline comments (// ...) for quick notes.
